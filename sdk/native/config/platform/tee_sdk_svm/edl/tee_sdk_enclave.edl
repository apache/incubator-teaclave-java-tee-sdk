// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    include "sgx_report.h"
    include "sgx_ql_lib_common.h"

    from "sgx_tstdc.edl"              import *;
    from "sgx_pthread.edl"            import *;
    from "sgx_stdc_ex.edl"            import *;

    trusted {
        // create a graal isolate;
        public int enclave_svm_isolate_create([out, size=8] void* isolate, [out, size=8] void* isolateThread, int flag, [string, in] char* args);
        // load enclave services instance;
        public int load_enclave_svm_services(uint64_t isolate, [in, size=len0] void* input,  size_t len0, [out, size=8] void* output, [out, size=8] size_t* len1);
        // invoke enclave instance's services;
        public int invoke_enclave_svm_service(uint64_t isolate, [in, size=len0] void* input,  size_t len0, [out, size=8] void* output, [out, size=8] size_t* len1);
        // unload enclave services instance;
        public int unload_enclave_svm_service(uint64_t isolate, [in, size=len0] void* input,  size_t len0, [out, size=8] void* output, [out, size=8] size_t* len1);
        // destroy a graal isolate;
        public int enclave_svm_isolate_destroy(uint64_t isolateThread);
        // generate sgx enclave remote attestation report;
        public int generate_remote_attestation_report([in, size=hash_length] void* hash,  size_t hash_length, [out]sgx_report_t* ra_report);
    };

    untrusted {
        // rlimit syscall.
        int ocall_getrlimit(int resource, [out, size=16]void *rlim);
        // malloc memory buffer from host side to store an returned object's serialization result.
        int ocall_malloc(size_t size, [out, size=8]void *ptr);

        // get target info from host.
        quote3_error_t ocall_get_target_info([out] sgx_target_info_t *qe_target_info);
    };
};
